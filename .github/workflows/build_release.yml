name: "ðŸ“¦ Build & ðŸš€ Release"

env:
  PROJECT_FOLDER: "qgis_resource_sharing"
  PYTHON_VERSION: "3.12"

on:
  push:
    branches:
      - master
    tags:
      - "*"

  pull_request:
    branches:
      - master
    paths:
      - .github/workflows/build_release.yml

jobs:
  translation:
    name: "ðŸ’¬ i18n compilation"
    runs-on: ubuntu-latest

    steps:
      - name: Get source code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          # commented out waiting for Python 3.12 being available for pyqt5-tools. See: https://github.com/altendky/pyqt-tools/issues/131
          # python-version: ${{ env.PYTHON_VERSION }}
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements/translation.txt"

      - name: Install system requirements
        run: |
          sudo apt update
          sudo apt install qt5-qmake qttools5-dev-tools
          python3 -m pip install -U pyqt5-tools

      - name: Update translations
        run: pylupdate5 -noobsolete -verbose ${{ env.PROJECT_FOLDER }}/resources/i18n/plugin_translation.pro

      - name: Compile translations
        run: lrelease ${{ env.PROJECT_FOLDER }}/resources/i18n/*.ts

      - uses: actions/upload-artifact@v4
        with:
          name: translations-build
          path: ${{ env.PROJECT_FOLDER }}/**/*.qm
          if-no-files-found: error

  dependencies:
    name: "ðŸ§± Dependencies build"
    runs-on: windows-latest

    steps:
      - name: Get source code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "requirements/embedded.txt"

      - name: Install project requirements
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install --no-deps -U -r requirements/embedded.txt -t ${{ env.PROJECT_FOLDER }}/ext_libs

      - name: Cleaning up
        shell: bash
        run: |
          rm -rf `find ${{ env.PROJECT_FOLDER }} -type d -name __pycache__`
          rm -rf `find ${{ env.PROJECT_FOLDER }} -type d -name *.dist-info`
          rm -rf `find ${{ env.PROJECT_FOLDER }}/ext_libs -type d -name docs`
          rm -rf `find ${{ env.PROJECT_FOLDER }}/ext_libs -type d -name tests`
          rm -rf `find ${{ env.PROJECT_FOLDER }}/ext_libs -type d -name test`

      - uses: actions/upload-artifact@v4
        with:
          name: dependencies-build
          path: ${{ env.PROJECT_FOLDER }}/ext_libs/
          if-no-files-found: error

  # -- NO TAGS ----------------------------------------------------------------------
  packaging:
    name: "ðŸ“¦ Packaging plugin"
    runs-on: ubuntu-latest
    needs:
      - dependencies
      - translation

    if: ${{ !startsWith(github.ref, 'refs/tags/') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "requirements/packaging.txt"

      - name: Install project requirements
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install -U -r requirements/packaging.txt

      - name: Download translations
        uses: actions/download-artifact@v5
        with:
          name: translations-build
          path: ${{ env.PROJECT_FOLDER }}

      - name: Download dependencies
        uses: actions/download-artifact@v5
        with:
          name: dependencies-build
          path: ${{ env.PROJECT_FOLDER }}/ext_libs/

      - name: List files
        run: tree ${{ env.PROJECT_FOLDER }}

      - name: Amend gitignore to include compiled translations and add it to tracked files
        run: |
          # include compiled translations and dependencies
          sed -i "s|^*.qm.*| |" .gitignore
          sed -i "s|^${{ env.PROJECT_FOLDER }}/ext_libs/.*| |" .gitignore

          # git add full project
          git add ${{ env.PROJECT_FOLDER }}/

      - name: Package the latest version
        run: qgis-plugin-ci package latest --allow-uncommitted-changes

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_FOLDER }}-latest
          path: ${{ env.PROJECT_FOLDER }}.*.zip
          if-no-files-found: error

  # -- ONLY TAGS ----------------------------------------------------------------------
  release:
    name: "ðŸš€ Release"
    runs-on: ubuntu-latest
    needs:
      - dependencies
      - translation

    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "requirements/packaging.txt"

      - name: Install project requirements
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install -U -r requirements/packaging.txt

      - name: Download translations
        uses: actions/download-artifact@v5
        with:
          name: translations-build
          path: ${{ env.PROJECT_FOLDER }}

      - name: Download dependencies
        uses: actions/download-artifact@v5
        with:
          name: dependencies-build
          path: ${{ env.PROJECT_FOLDER }}/ext_libs/

      - name: Amend gitignore to include compiled translations and add it to tracked files
        run: |
          # include compiled translations and dependencies
          sed -i "s|^*.qm.*| |" .gitignore
          sed -i "s|^${{ env.PROJECT_FOLDER }}/ext_libs/.*| |" .gitignore

          # git add full project
          git add ${{ env.PROJECT_FOLDER }}/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: true
          generate_release_notes: true

      - name: Deploy plugin
        run: >-
          qgis-plugin-ci
          release ${GITHUB_REF/refs\/tags\//}
          --allow-uncommitted-changes
          --create-plugin-repo
          --github-token ${{ secrets.GITHUB_TOKEN }}
          --osgeo-username ${{ secrets.OSGEO_USER }}
          --osgeo-password ${{ secrets.OSGEO_PASSWORD }}
